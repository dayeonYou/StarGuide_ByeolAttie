#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef SEESO_SWIFT_H
#define SEESO_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SeeSo",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// The enum that contains accuracy criteria of <code>GazeTracker.startCalibration(mode:criteria:region:)</code>.
typedef SWIFT_ENUM(NSInteger, AccuracyCriteria, open) {
/// Default calibration accuracy criteria.
  AccuracyCriteriaDEFAULT = 0,
/// Low calibration accuracy criteria.
  AccuracyCriteriaLOW = 1,
/// High calibration accuracy criteria.
  AccuracyCriteriaHIGH = 2,
};


/// :nodoc:
SWIFT_PROTOCOL("_TtP5SeeSo19GazeTrackerDelegate_")
@protocol GazeTrackerDelegate
@end


/// Methods for processing calibration and showing progress of calibration
/// important:
///
/// <ul>
///   <li>
///     CalibrationDelegate must be called on main thread.
///   </li>
///   <li>
///     Please use <code>DispatchQueue.main.async()</code> when using UI.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP5SeeSo19CalibrationDelegate_")
@protocol CalibrationDelegate <GazeTrackerDelegate>
/// Callback that returns the x, y coordinate of the next calibration point.
/// precondition:
///
/// You need to call <code>GazeTracker.startCollectSamples()</code> to continue collecting samples
/// for the next calibration target.
/// \param x,y The x, y coordinate of the next calibration target. Origin is the top-left of the device screen.
/// The unit is in point(pt).
///
- (void)onCalibrationNextPointWithX:(double)x y:(double)y;
/// Callback that returns collection progress of the current calibration target.
/// The progress will be a value in between 0.0 and 1.0.
/// <blockquote>
/// Tip:  The next point will be guided when the value reaches 1.0.
///
/// </blockquote>
/// <ul>
///   <li>
///     Parameters:
///     progress: Calibration progression for each point.
///   </li>
/// </ul>
- (void)onCalibrationProgressWithProgress:(double)progress;
/// Callback that notifies when the calibration ends.
/// When this function is called, the calibration UI will be removed.
/// After this callback, data from <code>GazeDelegate</code> will be calibrated gaze data.
/// important:
///
/// <ul>
///   <li>
///     The calibrationData passed as a parameter has already been applied to <code>GazeTracker</code>
///   </li>
/// </ul>
/// <blockquote>
/// Note:
///
/// </blockquote>
/// <ul>
///   <li>
///     You can save and load this calibration data directly into <code>GazeTracker</code>
///   </li>
///   <li>
///     When restarting the app or etc, you can set data
///     by calling <code>GazeTracker.setCalibrationData(calibrationData:)</code> without calibration
///   </li>
/// </ul>
/// \param calibrationData Calibration Data
///
- (void)onCalibrationFinishedWithCalibrationData:(NSArray<NSNumber *> * _Nonnull)calibrationData;
@end

/// The enum that contains mode types of <code>GazeTracker-42s88/startCalibration(mode:criteria:region:)-2izmj</code>.
typedef SWIFT_ENUM(NSInteger, CalibrationMode, open) {
/// Default. Represent FIVE_POINT.
  CalibrationModeDEFAULT = 0,
/// One-point calibration mode.
  CalibrationModeONE_POINT = 1,
/// Five-point calibration mode.
  CalibrationModeFIVE_POINT = 5,
/// Six-point calibration mode. (not in use usually)
  CalibrationModeSIX_POINT = 6,
};

/// The enum that contains state types using at <code>GazeDelegate</code>.
typedef SWIFT_ENUM(NSInteger, EyeMovementState, open) {
/// It means that the gazes from the past and the gazes up to the present have made a fixation.
  EyeMovementStateFIXATION = 0,
/// It means that the gazes from the past and the gazes up to the present have formed a saccade.
  EyeMovementStateSACCADE = 2,
/// Not fixation or saccade.
  EyeMovementStateUNKNOWN = 3,
};

@class FaceInfo;

/// Method for checking user’s face state on screen
SWIFT_PROTOCOL("_TtP5SeeSo12FaceDelegate_")
@protocol FaceDelegate <GazeTrackerDelegate>
/// Check <code>FaceInfo</code>
- (void)onFaceWithFaceInfo:(FaceInfo * _Nonnull)faceInfo;
@end


SWIFT_CLASS("_TtC5SeeSo8FaceInfo")
@interface FaceInfo : NSObject
/// Timestamp of face information
/// <blockquote>
/// Note:
///
/// </blockquote>
/// <ul>
///   <li>
///     Unit: millisecond
///   </li>
///   <li>
///     Format: UTC.
///   </li>
/// </ul>
@property (nonatomic, readonly) double timestamp;
/// Value of facial recognition confidence (0.0 ~ 1.0)
@property (nonatomic, readonly) double score;
/// Position and size of the face
@property (nonatomic, readonly) CGRect rect;
/// Up-down movement of the face
@property (nonatomic, readonly) double pitch;
/// Left-right rotation of the face
@property (nonatomic, readonly) double yaw;
/// Tilting of the head to the left or right
@property (nonatomic, readonly) double roll;
/// Size of image for displaying face
@property (nonatomic, readonly) CGSize imageSize;
/// x coordinate value of face
@property (nonatomic, readonly) double centerX;
/// y coordinate value of face
@property (nonatomic, readonly) double centerY;
/// distance from camera to face
@property (nonatomic, readonly) double centerZ;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GazeInfo;

/// Method for checking user’s tracking state on screen
SWIFT_PROTOCOL("_TtP5SeeSo12GazeDelegate_")
@protocol GazeDelegate <GazeTrackerDelegate>
/// Check <code>GazeInfo</code>
- (void)onGazeWithGazeInfo:(GazeInfo * _Nonnull)gazeInfo;
@end

enum TrackingState : NSInteger;
enum ScreenState : NSInteger;

/// A class composed of information about gaze tracking.
SWIFT_CLASS("_TtC5SeeSo8GazeInfo")
@interface GazeInfo : NSObject
/// x coordinate value of gaze point. Origin is device screen. The unit is in point(pt).
@property (nonatomic, readonly) double x;
/// y coordinate value of gaze point. Origin is device screen. The unit is in point(pt).
@property (nonatomic, readonly) double y;
/// Timestamp of gaze point.
/// <blockquote>
/// Note:
///
/// </blockquote>
/// <ul>
///   <li>
///     Unit : millisecond
///   </li>
///   <li>
///     Format : UTC.
///   </li>
/// </ul>
@property (nonatomic, readonly) double timestamp;
@property (nonatomic, readonly) double fixationX;
@property (nonatomic, readonly) double fixationY;
@property (nonatomic, readonly) double leftOpenness;
@property (nonatomic, readonly) double rightOpenness;
/// Check <code>TrackingState</code>
@property (nonatomic, readonly) enum TrackingState trackingState;
/// Check <code>EyeMovementState</code>
@property (nonatomic, readonly) enum EyeMovementState eyeMovementState;
/// Check <code>ScreenState</code>
@property (nonatomic, readonly) enum ScreenState screenState;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol StatusDelegate;
@protocol ImageDelegate;
@protocol UserStatusDelegate;
@class NSString;
@protocol InitializationDelegate;
@class UserStatusOption;
@class UIView;

/// The class that generates gaze data using the device’s frontal camera.
/// <ul>
///   <li>
///     Configures device orientation and calibration setting.
///   </li>
///   <li>
///     Manages the gazetracking lifecycle - start, pause, resume, and close.
///   </li>
///   <li>
///     Manage the gaze tracking that start, pause, resume and stop.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC5SeeSo11GazeTracker")
@interface GazeTracker : NSObject
/// :nodoc:
@property (nonatomic, weak) id <StatusDelegate> _Nullable statusDelegate;
/// :nodoc:
@property (nonatomic, weak) id <GazeDelegate> _Nullable gazeDelegate;
/// :nodoc:
@property (nonatomic, weak) id <CalibrationDelegate> _Nullable calibrationDelegate;
/// :nodoc:
@property (nonatomic, weak) id <ImageDelegate> _Nullable imageDelegate;
/// :nodoc:
@property (nonatomic, weak) id <UserStatusDelegate> _Nullable userStatusDelegate;
/// :nodoc:
@property (nonatomic, weak) id <FaceDelegate> _Nullable faceDelegate;
/// Initializes <code>GazeTracker.startTracking()</code> object
/// <blockquote>
/// Important:
///
/// </blockquote>
/// note:
///
/// InitializationDelegate will relay initialized object.
/// <ul>
///   <li>
///     Initializing process requires <em>authentication</em>.
///   </li>
///   <li>
///     This function works <em>asynchronously</em>.
///   </li>
/// </ul>
/// \param license Key generated from <a href="http://manage.seeso.io">manage page</a>
///
/// \param delegate Delegate represents initialization status
///
/// \param option A class containing User status option information (optional)
///
+ (void)initGazeTrackerWithLicense:(NSString * _Nonnull)license delegate:(id <InitializationDelegate> _Nonnull)delegate option:(UserStatusOption * _Nullable)option SWIFT_METHOD_FAMILY(none);
/// Terminates <code>GazeTracker</code> object.
/// note:
///
/// Once terminated, every API will be disabled.
/// \param tracker Target <code>GazeTracker</code> instance to terminate
///
+ (void)deinitGazeTrackerWithTracker:(GazeTracker * _Nullable)tracker;
/// Start gaze tracking
/// important:
///
/// This function should be called before start gaze tracking.
/// note:
///
/// <code>StatusDelegate.onStarted()</code> will be called after start succeeded.
- (void)startTracking;
/// Stop gaze tracking.
/// note:
///
/// <code>StatusDelegate.onStopped(error:)</code> will be called after succeed to stop tracking.
- (void)stopTracking;
/// A Boolean value indicating whether the gaze tracking is in progress
- (BOOL)isTracking SWIFT_WARN_UNUSED_RESULT;
/// The parameter that sets the FPS of the gaze tracking source.
/// note:
///
/// FPS can be dropped due to device spec. The default value is 30.
/// important:
///
/// FPS parameter should be 0…30
/// \param fps Custom FPS(Frame Per Second) for gaze tracking
///
///
/// returns:
///
/// Whether fps setting is normally performed
- (BOOL)setTrackingFPSWithFps:(NSInteger)fps;
/// A Boolean value indicating whether the calibration is in progress
- (BOOL)isCalibrating SWIFT_WARN_UNUSED_RESULT;
/// Start the calibration process.
/// There are <em>4</em> cases of function return.
/// <hr/>
/// <ul>
///   <li>
///     true
///     <ul>
///       <li>
///         when parameters are all valid.
///       </li>
///     </ul>
///   </li>
///   <li>
///     false
///     <ul>
///       <li>
///         If it was called when the tracker is <code>not</code> tracking
///       </li>
///       <li>
///         If the value of <code>mode</code> is not defined
///       </li>
///       <li>
///         If the calibration region has set outside the device screen.
///       </li>
///     </ul>
///     The <code>false</code> return means calibration process will be stopped.
///   </li>
/// </ul>
/// \param mode Can select calibration option. Check <code>CalibrationMode</code>
///
/// \param criteria Option that manage calibration process and accuracy. Check <code>AccuracyCriteria</code>
///
/// \param region Region that needs to be calibrated. The unit is point(pt).
///
- (BOOL)startCalibrationWithMode:(enum CalibrationMode)mode criteria:(enum AccuracyCriteria)criteria region:(CGRect)region;
/// Set existing calibration data to <code>GazeTracker</code>.
/// \param calibrationData Calibration Data
///
///
/// returns:
///
/// Whether Gaze Tracking is in progress and also data set successfully
- (BOOL)setCalibrationDataWithCalibrationData:(NSArray<NSNumber *> * _Nonnull)calibrationData;
/// Stop the calibration process.
- (void)stopCalibration;
/// Continues calibration after showing the next calibration point to the user.
/// <blockquote>
/// Precondition:
///
/// </blockquote>
/// <ol>
///   <li>
///     (optional) Previous calibration is completed to the coordinates obtained through
///     <code>CalibrationDelegate.onCalibrationNextPoint(x:y:)</code> has finished.
///   </li>
///   <li>
///     (optional) Checked <code>CalibrationDelegate.onCalibrationProgress(progress:)</code> returned 1.0.
///   </li>
///   <li>
///     Obtained the next calibration coordinates from <code>CalibrationDelegate.onCalibrationNextPoint(x:y:)</code>.
///   </li>
///   <li>
///     Finished place specific View (ex. Custom View) on coordinates from step 3.
///   </li>
/// </ol>
/// note:
///
/// <code>startCollectSamples</code> might return false when using <code>SwiftUI</code>
/// due to timing issue between <code>SwiftUI</code> and core logic.
/// You may fix this issue by adding 0.5 seconds before calling <code>startCollectSamples</code>.
///
/// returns:
///
/// <ul>
///   <li>
///     Whether calibration of this step could start successfully.
///   </li>
/// </ul>
- (BOOL)startCollectSamples;
/// Set view to present camera preview that <code>GazeTracker</code>is using
/// <blockquote>
/// Tip:
/// You should rotate the screen if landscape mode
///
/// </blockquote>
- (void)setCameraPreviewWithPreview:(UIView * _Nonnull)preview;
/// Remove the camera preview.
- (void)removeCameraPreview;
/// Enroll all delegates which inherited <code>GazeTrackerDelegate</code> to GazeTracker at once.
/// \param statusDelegate Check <code>StatusDelegate</code>
///
/// \param gazeDelegate Check <code>GazeDelegate</code>
///
/// \param calibrationDelegate Check <code>CalibrationDelegate</code>
///
/// \param imageDelegate Check <code>ImageDelegate</code>
///
/// \param userStatusDelegate Check <code>UserStatusDelegate</code>
///
- (void)setDelegatesWithStatusDelegate:(id <StatusDelegate> _Nullable)statusDelegate gazeDelegate:(id <GazeDelegate> _Nullable)gazeDelegate calibrationDelegate:(id <CalibrationDelegate> _Nullable)calibrationDelegate userStatusDelegate:(id <UserStatusDelegate> _Nullable)userStatusDelegate imageDelegate:(id <ImageDelegate> _Nullable)imageDelegate faceDelegate:(id <FaceDelegate> _Nullable)faceDelegate;
/// Set time interval for <code>UserStatusOption</code> <code>Attention</code> callback.
/// The UserStatus <code>Attention</code> score will be calculated with given time interval.
/// Start and end timestamps are passed to <em>timestampBegin</em> and <em>timestampEnd</em>.
/// via the <code>UserStatusDelegate.onAttention(timestampBegin:timestampEnd:score:)</code> callback.
/// <ul>
///   <li>
///     parameters:
///     interval: The value can be set in units of 10 to 60 seconds. (The default is 30 seconds.)
///   </li>
/// </ul>
- (void)setAttentionIntervalWithInterval:(NSInteger)interval;
/// Get current <em>Attention</em> score from the <code>GazeTracker</code>.
/// This API does not provide <em>timestamp</em> of the <em>Attention</em> score data.
- (double)getAttentionScore SWIFT_WARN_UNUSED_RESULT;
/// Set the user’s attention roi (Check this: <a href="https://en.wikipedia.org/wiki/Region_of_interest">Region of Interest</a>).
/// \param region Attention region area (default is UIScreen Bounds).
///
- (void)setAttentionRegionWithRegion:(CGRect)region;
/// Get current attention region.
///
/// returns:
/// default is UIScreen Bounds.
- (CGRect)getAttentionRegion SWIFT_WARN_UNUSED_RESULT;
/// Remove current set attention region.
- (void)removeAttentionRegion;
/// Returns current SDK version.
+ (NSString * _Nonnull)getFrameworkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set the forced device orientation for the GazeTracker.
/// This function sets the orientation of the device forcibly for certain situations.
/// Specifically, when the device is in portrait lock mode and the developer wants to rotate it to landscape mode,
/// the gaze coordinates also need to be rotated.
/// However, the function only works when not in the calibration process,
/// meaning that the device’s orientation cannot be forcibly changed during calibration.
/// \param orientation The forced device orientation
///
///
/// returns:
///
/// <ul>
///   <li>
///     True if the forced orientation is set successfully.
///   </li>
///   <li>
///     False if the function is called during the calibration process.
///   </li>
/// </ul>
- (BOOL)setForcedOrientationWithOrientation:(UIInterfaceOrientation)orientation;
/// Reset the forced device orientation for the GazeTracker.
/// This function resets the orientation of the device that was forcibly set by the <code>setForcedOrientation</code> function.
/// After this function is called, the device orientation will no longer be forcibly controlled,
/// and the gaze coordinates will be determined based on the actual device orientation.
/// However, this function only works when not in the calibration process,
/// meaning that the device’s orientation cannot be forcibly changed during calibration.
///
/// returns:
///
/// <ul>
///   <li>
///     True if the forced orientation is reset successfully.
///   </li>
///   <li>
///     False if the function is called during the calibration process.
///   </li>
/// </ul>
- (BOOL)resetForcedOrientation;
@end





SWIFT_PROTOCOL("_TtP5SeeSo13ImageDelegate_")
@protocol ImageDelegate <GazeTrackerDelegate>
/// The function that provide the image as <code>CMSampleBuffer</code> form.
/// \param timestamp The timestamp of camera image creation. The unit is millisecond. The time format is UTC.
///
/// \param image <code>CMSampleBuffer</code> type image from camera
/// (kCVPixelFormatType_32BGRA, AVCaptureSession.Preset.vga640x480).
/// The direction is 90 deg rotated as counter clockwise from portrait direction.
///
- (void)onImageWithTimestamp:(double)timestamp image:(CMSampleBufferRef _Nonnull)image;
@end

enum InitializationError : NSInteger;

/// Method for checking initialization state
/// The callback function that calls when <code>GazeTracker.init</code> function is called.
SWIFT_PROTOCOL("_TtP5SeeSo22InitializationDelegate_")
@protocol InitializationDelegate <GazeTrackerDelegate>
/// Returns a constructed object when succeed, but nil if failed.
/// The error will be set by its type when construction failed. For example:
/// \code
/// public func onInitialized( tracker: GazeTracker?, error: InitializationError){
/// if (tracker != nil) {
/// // Take object as class property when initialzation succeed
///  this.tracker = tracker;
/// } else {
///  if (error == InitializationError.ERROR_INIT) {
///    print("Initialization failed")
///  } else if (error == InitializationError.ERROR_CAMERA_PERMISSION) {
///    ...
///    }
///  }
/// }
///
/// \endcode
- (void)onInitializedWithTracker:(GazeTracker * _Nullable)tracker error:(enum InitializationError)error;
@end

/// The Enum that contains error types of <code>InitializationDelegate</code>
/// Please read : <a href="https://docs.seeso.io/docs/document/authentication">Authentication</a> for more details.
typedef SWIFT_ENUM(NSInteger, InitializationError, open) {
  InitializationErrorERROR_NONE = 0,
  InitializationErrorERROR_INIT = 1,
  InitializationErrorERROR_CAMERA_PERMISSION = 2,
  InitializationErrorAUTH_INVALID_KEY = 3,
  InitializationErrorAUTH_INVALID_ENV_USED_DEV_IN_PROD = 4,
  InitializationErrorAUTH_INVALID_ENV_USED_PROD_IN_DEV = 5,
  InitializationErrorAUTH_INVALID_PACKAGE_NAME = 6,
  InitializationErrorAUTH_INVALID_APP_SIGNATURE = 7,
  InitializationErrorAUTH_EXCEEDED_FREE_TIER = 8,
  InitializationErrorAUTH_DEACTIVATED_KEY = 9,
  InitializationErrorAUTH_INVALID_ACCESS = 10,
  InitializationErrorAUTH_UNKNOWN_ERROR = 11,
  InitializationErrorAUTH_SERVER_ERROR = 12,
  InitializationErrorAUTH_CANNOT_FIND_HOST = 13,
  InitializationErrorAUTH_WRONG_LOCAL_TIME = 14,
  InitializationErrorAUTH_INVALID_KEY_FORMAT = 15,
  InitializationErrorAUTH_EXPIRED_KEY = 16,
  InitializationErrorERROR_NOT_ADVANCED_TIER = 17,
};


/// :nodoc:
SWIFT_CLASS("_TtC5SeeSo20OneEuroFilterManager")
@interface OneEuroFilterManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The enum that contains state types using at <code>GazeDelegate</code>
typedef SWIFT_ENUM(NSInteger, ScreenState, open) {
/// Gaze tracking has succeeded and the gaze point is inside the device screen.
  ScreenStateINSIDE_OF_SCREEN = 0,
/// Gaze tracking has succeeded and the gaze point is outside the device screen.
  ScreenStateOUTSIDE_OF_SCREEN = 1,
/// Gaze tracking is failed.
  ScreenStateUNKNOWN = 2,
};

enum StatusError : NSInteger;

/// Methods for checking start/stop state of gaze tracker itself
SWIFT_PROTOCOL("_TtP5SeeSo14StatusDelegate_")
@protocol StatusDelegate <GazeTrackerDelegate>
/// The function that automatically calls after <code>GazeTracker.startTracking()</code> succeed.
/// Actions like calibration, preview, etc. are available after it.
- (void)onStarted;
/// Error value will be <code>StatusError.ERROR_NONE</code>
/// if gaze tracking stopped after <code>GazeTracker.stopTracking()</code> called but different values for a different statuses.
/// It works properly when <code>GazeTracker.startTracking()</code> explicitly called at the gaze tracker stopping process.
- (void)onStoppedWithError:(enum StatusError)error;
@end

/// The enum that contains error types of StatusDelegate
typedef SWIFT_ENUM(NSInteger, StatusError, open) {
/// <code>GazeTracker.stopTracking()</code> call succeed without error.
  StatusErrorERROR_NONE = 0,
/// Error code occurs when <code>GazeTracker.startTracking()</code> is called but front camera of device is not available.
  StatusErrorERROR_CAMERA_START = 1,
/// Error code occurs when camera is unavailable.
  StatusErrorERROR_CAMERA_INTERRUPT = 2,
};

/// The enum that contains state types using at GazeDelegate.
typedef SWIFT_ENUM(NSInteger, TrackingState, open) {
/// Face alignment is in a best position (Gaze tracking success, with valid x and y).
  TrackingStateSUCCESS = 0,
/// Face alignment is not in the best position, should not be used for precise gaze tracking
/// (Gaze tracking success, with less accurate x and y).
  TrackingStateLOW_CONFIDENCE = 1,
/// Face alignment is not suitable for tracking (Gaze tracking fail, with invalid x and y).
  TrackingStateUNSUPPORTED = 2,
/// Face is missing (Gaze tracking fail).
  TrackingStateFACE_MISSING = 3,
};



/// Methods for checking user’s state with custom user options
/// note:
///
/// <ol>
///   <li>
///     <em><code>Attention</code></em>: How much the user attention is focused on the screen content for interval time (0.0 ~ 1.0)
///   </li>
///   <li>
///     <em>Drowsiness</em>: If the user feel drowsiness (True/False)
///   </li>
///   <li>
///     <em>Blink</em>: If the user blink eyes (left eye, right eye, general(both eyes))
///   </li>
/// </ol>
SWIFT_PROTOCOL("_TtP5SeeSo18UserStatusDelegate_")
@protocol UserStatusDelegate <GazeTrackerDelegate>
@optional
/// Callback function that informs the user’s level of concentration on the screen.
/// <blockquote>
/// Tip:
///
/// </blockquote>
/// <ol>
///   <li>
///     Timestamp range of the data will be passed as timestampBegin and timestampEnd in onAttention callback.
///   </li>
///   <li>
///     The default time interval is <em>30 seconds</em>.
///   </li>
///   <li>
///     If the user attention level is <em>Low</em>, score in onAttention callback will be closed to <em>0.0</em>.
///   </li>
///   <li>
///     If the user attention level is <em>High</em>, score in onAttention callback will be closed to <em>1.0</em>.
///   </li>
/// </ol>
/// \param timestampBegin Beginning Timestamp of the data.
///
/// \param timestampEnd Ending Timestamp of the data.
///
/// \param attentionScore User Attention rate score between the timestamps. (0.0 ~ 1.0)
///
- (void)onAttentionWithTimestampBegin:(NSInteger)timestampBegin timestampEnd:(NSInteger)timestampEnd score:(double)score;
/// A callback function that informs whether the user is blinking or not.
/// <blockquote>
/// Tip:
///
/// </blockquote>
/// <ol>
///   <li>
///     Timestamp of the data will be passed as timestamp in
///     <code>onBlink(timestamp:isBlinkLeft:isBlinkRight:isBlink:eyeOpenness:)</code> callback.
///   </li>
///   <li>
///     If the user blink left eye, isBlinkLeft in onBlink callback will be true.
///   </li>
///   <li>
///     If the user blink right eye, isBlinkRight in onBlink callback will be true.
///   </li>
///   <li>
///     If the user blink eyes, isBlink in onBlink callback will be true (This is a general blink condition).
///   </li>
///   <li>
///     If the user’s eyes are wide, eyeOpenness in onBlink callback will be closed to 1.0 (not available yet).
///   </li>
///   <li>
///     If the user’s eyes are narrow, eyeOpenness in onBlink callback will be closed to 0.0 (not available yet).
///   </li>
/// </ol>
/// \param timestamp Timestamp of the data.
///
/// \param isBlinkLeft User Left Blink flag..
///
/// \param isBlinkRight User Right Blink flag.
///
/// \param isBlink User Blink flag.
///
/// \param eyeOpenness User EyeOpenness rate (not available yet).
///
- (void)onBlinkWithTimestamp:(NSInteger)timestamp isBlinkLeft:(BOOL)isBlinkLeft isBlinkRight:(BOOL)isBlinkRight isBlink:(BOOL)isBlink leftOpenness:(double)leftOpenness rightOpenness:(double)rightOpenness;
/// Callback indicating whether the user is drowsy
/// Timestamp of the data will be passed as timestamp in onDrowsiness callback.
/// If the user feel Drowsiness, isDrowsiness in onDrowsiness callback will be true,
/// Otherwise, isDrowsiness will be false.
/// d- isDrowsiness [Bool] : Whether user is drowsy
/// <blockquote>
/// Tip:
///
/// </blockquote>
/// <ol>
///   <li>
///     Timestamp of the data will be passed as timestamp in onDrowsiness callback.
///   </li>
///   <li>
///     If the user feel Drowsiness, isDrowsiness in onDrowsiness callback will be true,
///     Otherwise, isDrowsiness will be false.
///   </li>
/// </ol>
/// \param timestamp [Int] Timestamp of the data.
///
- (void)onDrowsinessWithTimestamp:(NSInteger)timestamp isDrowsiness:(BOOL)isDrowsiness intensity:(double)intensity;
@end


/// The class contains User Status options information for GazeTracker
SWIFT_CLASS("_TtC5SeeSo16UserStatusOption")
@interface UserStatusOption : NSObject
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a Boolean value that indicates whether the gaze tracker module uses attention checking option
- (BOOL)isUseAttention SWIFT_WARN_UNUSED_RESULT;
/// Returns a Boolean value that indicates whether the gaze tracker module uses blinking checking option
- (BOOL)isUseBlink SWIFT_WARN_UNUSED_RESULT;
/// Returns a Boolean value that indicates whether the gaze tracker module uses drowsiness checking option
- (BOOL)isUseDrowsiness SWIFT_WARN_UNUSED_RESULT;
/// Sets the gaze tracker module to check user attention level
- (void)useAttention;
/// Sets the gaze tracker module to check user blinking state
- (void)useBlink;
/// Sets the gaze tracker module to check user drowsiness level
- (void)useDrowsiness;
/// Sets the gaze tracker module to check all options
/// Checking options
/// <ul>
///   <li>
///     <em>Drowsiness</em> level
///   </li>
///   <li>
///     <em>Attention</em> level
///   </li>
///   <li>
///     <em>Blinking</em> state
///   </li>
/// </ul>
- (void)useAll;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
